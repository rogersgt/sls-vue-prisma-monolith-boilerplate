service: ${env:APP_NAME}
frameworkVersion: '3'

useDotenv: true

configValidationMode: warn

deprecationNotificationMode: warn:summary

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${env:ENVIRONMENT, 'dev'}
  stackName: ${self:service}-${self:provider.stage}
  region: ${env:AWS_REGION, 'us-east-1'}
  eventBridge:
    useCloudFormation: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter*
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/${self:provider.stage}/${self:service}
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/${self:provider.stage}/${self:service}/*
  timeout: 15
  environment: ${self:custom.envByStage.${self:provider.stage}}

plugins:
  - ./deploy/plugins/serverless-run-remote-migrations/index.js
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline
  - serverless-frontend-plugin

custom:
  httpPort: ${env:HTTP_PORT, 3000}
  socketPort: ${env:SOCKET_PORT, 3001}
  serverless-offline:
    httpPort: ${self:custom.httpPort}
  # API Domain Configuration
  customDomain:
    domainName: ${env:API_DOMAIN_NAME}
    stage: $default
    basePath: ''
    certificateArn: ${env:AWS_ACM_CERTIFICATE_ARN}
    createRoute53Record: true
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: http
    autoDomain: true
  serverless-frontend-plugin:
    distDir: road-dog-frontend/dist
    build:
      cwdDir: road-dog-frontend
      command:
        - npm
        - run
        - build
      env:
        VITE_API_BASE_URL: https://${env:API_DOMAIN_NAME}
    distribution:
      acmCertificateArn: ${env:AWS_ACM_CERTIFICATE_ARN}
      dnsName: ${env:UI_DOMAIN_NAME}
      hostedZoneName: ${env:HOSTED_ZONE_NAME}
    offline:
      command:
        - echo
        - "Run npm start from road-dog-frontend dir"
  envByStage:
    dev:
      APP_NAME: ${self:service}
      LOG_LEVEL: ${env:LOG_LEVEL, 'debug'}
      STAGE: ${self:provider.stage}
      LOCALSTACK_ENDPOINT: http://localhost:4567
      ALLOW_CORS_ORIGIN: ${env:ALLOW_CORS_ORIGIN, 'http://localhost:3030'}
      GOOGLE_APP_CLIENT_ID: ${ssm:/app/${self:provider.stage}/${self:service}/GOOGLE_APP_CLIENT_ID}
    prod:
      APP_NAME: ${self:service}
      LOG_LEVEL: ${env:LOG_LEVEL, 'debug'}
      STAGE: ${self:provider.stage}
      ALLOW_CORS_ORIGIN: https://${env:APP_DOMAIN, '*'}
      GOOGLE_APP_CLIENT_ID: ${ssm:/app/${self:provider.stage}/${self:service}/GOOGLE_APP_CLIENT_ID}
  serverless-run-remote-migrations:
    build:
      dockerfile: ./deploy/migrations.Dockerfile
      context: .
      tag: ${env:COMMIT_SHA, 'latest'}
    deploy:
      # cpu: 512
      # memory: 1024
      command:
        - npm
        - run
        - db:migrate:deploy
      aws:
        stackName: ${self:service}-${self:provider.stage}-db-migrations
        securityGroupId: sg-040f3e97dca057752
        secret:
          name: DATABASE_URL
          valueFrom: arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/app/${self:provider.stage}/${self:service}/DATABASE_URL
  webpack:
    includeModules: true

functions:
  api:
    handler: src/index.api
    events:
      - httpApi: '*'
