datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id String @id @default(uuid())

  firstName String? @map("first_name")
  lastName String? @map("last_name")

  email String @map("email")
  emailVerified Boolean @map("email_verified") @default(false)
  pictureUrl String? @map("picture_url")
  googleUserId String? @map("google_user_id")

  bandMemberships BandUser[] @relation("band_user_user_id")
  venueNotesCreated VenueNote[] @relation("venue_note_created_by_id")
  showsCreated Show[] @relation("show_created_by_id")
  showsUpdated Show[] @relation("show_updated_by_id")

  @@index([email])
  @@unique([email])
  @@unique([googleUserId])
  @@map("user")
}

model Address {
  id String @id @default(uuid())

  latitude Int
  longitude Int

  streetAddress String @map("street_address")
  postalCode String? @map("postal_code")

  cityId String @map("city_id")
  city City @relation("address_city_id", fields: [cityId], references: [id])

  venues Venue[] @relation("venue_address_id")

  @@map("address")
}

model Country {
  id String @id @default(uuid())
  name String
  abbreviation String

  states Province[] @relation("province_country_id")

  @@unique([abbreviation])
  @@map("country")
}

// state
model Province {
  id String @id @default(uuid())
  name String
  abbreviation String

  cities City[] @relation("city_province_id")

  countryId String @map("country_id")
  country Country @relation("province_country_id", fields: [countryId], references: [id])

  @@unique([abbreviation])
  @@map("province")
}

model City {
  id String @id @default(uuid())

  name String

  provinceId String @map("province_id")
  province Province @relation("city_province_id", fields: [provinceId], references: [id])

  addresses Address[] @relation("address_city_id")
  localBands Band[] @relation("band_city_id")

  @@unique([name, provinceId])
  @@index([name])
  @@index([provinceId])
  @@map("city")
}

model Venue {
  id String @id @default(uuid())

  name String

  addressId String @map("address_id")
  address Address @relation("venue_address_id", fields: [addressId], references: [id])
  shows Show[] @relation("show_venue_id")

  venueNotes VenueNote[] @relation("venue_note_venue_id")

  created DateTime @default(now()) @map("created")
  updated DateTime @updatedAt @map("updated")

  @@map("venue")
}

model VenueNote {
  id String @id @default(uuid())

  content String
  venueId String @map("venue_id")
  venue Venue @relation("venue_note_venue_id", fields: [venueId], references: [id])

  createById String @map("created_by_id")
  createdBy User @relation("venue_note_created_by_id", fields: [createById], references: [id])

  bandId String? @map("band_id")
  band Band? @relation("venue_note_band_id", fields: [bandId], references: [id])

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([venueId])
  @@map("venue_note")
}

model Genre {
  id String @id @default(uuid())
  name String

  bands Band[]

  @@index([name])
  @@unique([name])
  @@map("genre")
}

model Band {
  id String @id @default(uuid())
  name String

  showsPlaying BandShow[] @relation("band_show_band_id")
  cityId String @map("city_id")
  city City @relation("band_city_id", fields: [cityId], references: [id])

  venueNotes VenueNote[] @relation("venue_note_band_id")
  bandMembers BandUser[] @relation("band_user_band_id")

  founded DateTime?
  genres Genre[]
  websiteUrl String? @map("website_url")
  instagramHandle String? @map("instagram_handle")
  spotifyArtistId String? @map("spotify_artist_id")

  created DateTime @default(now()) @map("created")
  updated DateTime @updatedAt @map("updated")

  @@index([cityId])
  @@index([name])
  @@index([cityId, name])
  @@map("band")
}

enum BandRole {
  OWNER @map("owner")
  MEMBER @map("member")
}

model BandUser {
  id String @id @default(uuid())

  userId String @map("user_id")
  user User @relation("band_user_user_id", fields: [userId], references: [id])

  bandId String @map("band_id")
  band Band @relation("band_user_band_id", fields: [bandId], references: [id], onDelete: Cascade)

  role BandRole @default(MEMBER)

  created DateTime @default(now()) @map("created")
  updated DateTime @updatedAt @map("updated")

  @@index([userId])
  @@index([bandId])
  @@map("band_user")
}

model BandShow {
  id String @id @default(uuid())
  bandId String @map("band_id")
  band Band @relation("band_show_band_id", fields: [bandId], references: [id], onDelete: Cascade)
  showId String @map("show_id")
  show Show @relation("band_show_show_id", fields: [showId], references: [id], onDelete: Cascade)

  lineupOrder Int @map("lineup_order")
  setStartTime DateTime? @map("set_start_time")

  created DateTime @default(now()) @map("created")
  updated DateTime @updatedAt @map("updated")

  @@index([showId])
  @@index([bandId])
  @@map("band_show")
}

enum ShowStatus {
  PENDING @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
}

model Show {
  id String @id @default(uuid())

  bandsPlaying BandShow[] @relation("band_show_show_id")
  eventName String? @map("event_name")

  venueId String? @map("venue_id")
  venue Venue? @relation("show_venue_id", fields: [venueId], references: [id])

  date DateTime @db.Date
  doorsOpenAt DateTime? @map("doors_open_at")

  createdById String @map("created_by_id")
  created DateTime @default(now()) @map("created")
  createdBy User @relation("show_created_by_id", fields: [createdById], references: [id], onDelete: Cascade)

  updatedById String @map("updated_by_id")
  updated DateTime @updatedAt @map("updated")
  updatedBy User @relation("show_updated_by_id", fields: [updatedById], references: [id], onDelete: Cascade)

  status ShowStatus @default(PENDING)

  @@index([venueId])
  @@index([date])
  @@map("show")
}
